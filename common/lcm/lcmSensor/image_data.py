"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class image_data(object):

    __slots__ = ["camera_id", "camera_name", "width", "height", "channels", "image_size", "image_bytes"]

    __typenames__ = ["int32_t", "string", "int32_t", "int32_t", "int32_t", "int32_t", "byte"]

    __dimensions__ = [None, None, None, None, None, None, ["image_size"]]

    def __init__(self):
        self.camera_id = 0
        """ LCM Type: int32_t """
        self.camera_name = ""
        """
        The camera id that provided the image
        LCM Type: string
        """

        self.width = 0
        """
        The name of the camera
        LCM Type: int32_t
        """

        self.height = 0
        """
        Width of the image
        LCM Type: int32_t
        """

        self.channels = 0
        """
        Height of the image
        LCM Type: int32_t
        """

        self.image_size = 0
        """
        Number of channels (e.g., 3 for RGB, 1 for grayscale)
        LCM Type: int32_t
        """

        self.image_bytes = b""
        """
        Size of the image data
        LCM Type: byte[image_size]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(image_data._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.camera_id))
        __camera_name_encoded = self.camera_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__camera_name_encoded)+1))
        buf.write(__camera_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">iiii", self.width, self.height, self.channels, self.image_size))
        buf.write(bytearray(self.image_bytes[:self.image_size]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != image_data._get_packed_fingerprint():
            raise ValueError("Decode error")
        return image_data._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = image_data()
        self.camera_id = struct.unpack(">i", buf.read(4))[0]
        __camera_name_len = struct.unpack('>I', buf.read(4))[0]
        self.camera_name = buf.read(__camera_name_len)[:-1].decode('utf-8', 'replace')
        self.width, self.height, self.channels, self.image_size = struct.unpack(">iiii", buf.read(16))
        self.image_bytes = buf.read(self.image_size)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if image_data in parents: return 0
        tmphash = (0xa89519035db244af) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if image_data._packed_fingerprint is None:
            image_data._packed_fingerprint = struct.pack(">Q", image_data._get_hash_recursive([]))
        return image_data._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", image_data._get_packed_fingerprint())[0]

