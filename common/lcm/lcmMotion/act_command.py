"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class act_command(object):

    __slots__ = ["sec", "nanosec", "utime", "seq", "chunkSize", "numJoint", "totalNumJoint", "jointPos", "jointVel", "numGripper", "totalNumGripper", "gripperPos", "totalEePos", "eePos", "totalEeQuat", "eeQuat", "workMode"]

    __typenames__ = ["int32_t", "int32_t", "int64_t", "int32_t", "int8_t", "int32_t", "int32_t", "float", "float", "int8_t", "int32_t", "float", "int32_t", "float", "int32_t", "float", "int8_t"]

    __dimensions__ = [None, None, None, None, None, None, None, ["totalNumJoint"], ["totalNumJoint"], None, None, ["totalNumGripper"], None, ["totalEePos"], None, ["totalEeQuat"], None]

    def __init__(self):
        self.sec = 0
        """ LCM Type: int32_t """
        self.nanosec = 0
        """ LCM Type: int32_t """
        self.utime = 0
        """ LCM Type: int64_t """
        self.seq = 0
        """ LCM Type: int32_t """
        self.chunkSize = 0
        """ LCM Type: int8_t """
        self.numJoint = 0
        """
        Number of action commands in this chunk
        LCM Type: int32_t
        """

        self.totalNumJoint = 0
        """ LCM Type: int32_t """
        self.jointPos = []
        """
        chunkSize * numJoint (computed beforehand)
        LCM Type: float[totalNumJoint]
        """

        self.jointVel = []
        """
        Flattened: [chunk0_joint0, chunk0_joint1, ..., chunk1_joint0, ...]
        LCM Type: float[totalNumJoint]
        """

        self.numGripper = 0
        """
        Same flattening pattern
        LCM Type: int8_t
        """

        self.totalNumGripper = 0
        """ LCM Type: int32_t """
        self.gripperPos = []
        """
        chunkSize * numGripper (computed beforehand)
        LCM Type: float[totalNumGripper]
        """

        self.totalEePos = 0
        """
        Flattened gripper positions
        LCM Type: int32_t
        """

        self.eePos = []
        """
        chunkSize * 3 (computed beforehand)
        LCM Type: float[totalEePos]
        """

        self.totalEeQuat = 0
        """
        Flattened end-effector positions [chunk0_x, chunk0_y, chunk0_z, chunk1_x, ...]
        LCM Type: int32_t
        """

        self.eeQuat = []
        """
        chunkSize * 4 (computed beforehand)
        LCM Type: float[totalEeQuat]
        """

        self.workMode = 0
        """
        Flattened end-effector quaternions [chunk0_w, chunk0_x, chunk0_y, chunk0_z, chunk1_w, ...]
        LCM Type: int8_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(act_command._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiqibii", self.sec, self.nanosec, self.utime, self.seq, self.chunkSize, self.numJoint, self.totalNumJoint))
        buf.write(struct.pack('>%df' % self.totalNumJoint, *self.jointPos[:self.totalNumJoint]))
        buf.write(struct.pack('>%df' % self.totalNumJoint, *self.jointVel[:self.totalNumJoint]))
        buf.write(struct.pack(">bi", self.numGripper, self.totalNumGripper))
        buf.write(struct.pack('>%df' % self.totalNumGripper, *self.gripperPos[:self.totalNumGripper]))
        buf.write(struct.pack(">i", self.totalEePos))
        buf.write(struct.pack('>%df' % self.totalEePos, *self.eePos[:self.totalEePos]))
        buf.write(struct.pack(">i", self.totalEeQuat))
        buf.write(struct.pack('>%df' % self.totalEeQuat, *self.eeQuat[:self.totalEeQuat]))
        buf.write(struct.pack(">b", self.workMode))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != act_command._get_packed_fingerprint():
            raise ValueError("Decode error")
        return act_command._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = act_command()
        self.sec, self.nanosec, self.utime, self.seq, self.chunkSize, self.numJoint, self.totalNumJoint = struct.unpack(">iiqibii", buf.read(29))
        self.jointPos = struct.unpack('>%df' % self.totalNumJoint, buf.read(self.totalNumJoint * 4))
        self.jointVel = struct.unpack('>%df' % self.totalNumJoint, buf.read(self.totalNumJoint * 4))
        self.numGripper, self.totalNumGripper = struct.unpack(">bi", buf.read(5))
        self.gripperPos = struct.unpack('>%df' % self.totalNumGripper, buf.read(self.totalNumGripper * 4))
        self.totalEePos = struct.unpack(">i", buf.read(4))[0]
        self.eePos = struct.unpack('>%df' % self.totalEePos, buf.read(self.totalEePos * 4))
        self.totalEeQuat = struct.unpack(">i", buf.read(4))[0]
        self.eeQuat = struct.unpack('>%df' % self.totalEeQuat, buf.read(self.totalEeQuat * 4))
        self.workMode = struct.unpack(">b", buf.read(1))[0]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if act_command in parents: return 0
        tmphash = (0x2fc1b8a05401c287) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if act_command._packed_fingerprint is None:
            act_command._packed_fingerprint = struct.pack(">Q", act_command._get_hash_recursive([]))
        return act_command._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", act_command._get_packed_fingerprint())[0]

