"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class act_request(object):
    """ A request message asking either for state status, robot status, or go home. """

    __slots__ = ["sec", "nanosec", "utime", "seq", "request_type"]

    __typenames__ = ["int32_t", "int32_t", "int64_t", "int32_t", "int8_t"]

    __dimensions__ = [None, None, None, None, None]

    kStateFeedbackRequest = 0
    """
    Consecutive sequence number
    -------- Request selector ----------------------------
    0 → state status request     1 → Robot status request     2 → Go home request
    """
    kRobotFeedbackRequest = 1
    kGoHomeRequest = 2

    def __init__(self):
        self.sec = 0
        """
        -------- Time & sequence -----------------------------
        LCM Type: int32_t
        """

        self.nanosec = 0
        """
        ROS-style seconds  (Unix epoch)
        LCM Type: int32_t
        """

        self.utime = 0
        """
        ROS-style nanoseconds
        LCM Type: int64_t
        """

        self.seq = 0
        """
        Microseconds since epoch
        LCM Type: int32_t
        """

        self.request_type = 0
        """ LCM Type: int8_t """

    def encode(self):
        buf = BytesIO()
        buf.write(act_request._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiqib", self.sec, self.nanosec, self.utime, self.seq, self.request_type))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != act_request._get_packed_fingerprint():
            raise ValueError("Decode error")
        return act_request._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = act_request()
        self.sec, self.nanosec, self.utime, self.seq, self.request_type = struct.unpack(">iiqib", buf.read(21))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if act_request in parents: return 0
        tmphash = (0xcf6f22ee5e514b77) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if act_request._packed_fingerprint is None:
            act_request._packed_fingerprint = struct.pack(">Q", act_request._get_hash_recursive([]))
        return act_request._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", act_request._get_packed_fingerprint())[0]

