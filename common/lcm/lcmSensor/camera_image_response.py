"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import lcmSensor

class camera_image_response(object):

    __slots__ = ["seq", "camera_count", "images"]

    __typenames__ = ["int32_t", "int32_t", "lcmSensor.image_data"]

    __dimensions__ = [None, None, ["camera_count"]]

    def __init__(self):
        self.seq = 0
        """ LCM Type: int32_t """
        self.camera_count = 0
        """
        Sequence number
        LCM Type: int32_t
        """

        self.images = []
        """
        number of devices responding
        LCM Type: lcmSensor.image_data[camera_count]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(camera_image_response._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.seq, self.camera_count))
        for i0 in range(self.camera_count):
            assert self.images[i0]._get_packed_fingerprint() == lcmSensor.image_data._get_packed_fingerprint()
            self.images[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != camera_image_response._get_packed_fingerprint():
            raise ValueError("Decode error")
        return camera_image_response._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = camera_image_response()
        self.seq, self.camera_count = struct.unpack(">ii", buf.read(8))
        self.images = []
        for i0 in range(self.camera_count):
            self.images.append(lcmSensor.image_data._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if camera_image_response in parents: return 0
        newparents = parents + [camera_image_response]
        tmphash = (0x805c14847b62e434+ lcmSensor.image_data._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if camera_image_response._packed_fingerprint is None:
            camera_image_response._packed_fingerprint = struct.pack(">Q", camera_image_response._get_hash_recursive([]))
        return camera_image_response._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", camera_image_response._get_packed_fingerprint())[0]

