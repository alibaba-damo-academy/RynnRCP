"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class req_camera_image(object):

    __slots__ = ["seq", "camera_count", "camera_ids", "camera_names"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "string"]

    __dimensions__ = [None, None, ["camera_count"], ["camera_count"]]

    def __init__(self):
        self.seq = 0
        """ LCM Type: int32_t """
        self.camera_count = 0
        """
        Sequence number
        LCM Type: int32_t
        """

        self.camera_ids = []
        """
        camera nums
        LCM Type: int32_t[camera_count]
        """

        self.camera_names = []
        """
        camera ids
        LCM Type: string[camera_count]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(req_camera_image._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.seq, self.camera_count))
        buf.write(struct.pack('>%di' % self.camera_count, *self.camera_ids[:self.camera_count]))
        for i0 in range(self.camera_count):
            __camera_names_encoded = self.camera_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__camera_names_encoded)+1))
            buf.write(__camera_names_encoded)
            buf.write(b"\0")

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != req_camera_image._get_packed_fingerprint():
            raise ValueError("Decode error")
        return req_camera_image._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = req_camera_image()
        self.seq, self.camera_count = struct.unpack(">ii", buf.read(8))
        self.camera_ids = struct.unpack('>%di' % self.camera_count, buf.read(self.camera_count * 4))
        self.camera_names = []
        for i0 in range(self.camera_count):
            __camera_names_len = struct.unpack('>I', buf.read(4))[0]
            self.camera_names.append(buf.read(__camera_names_len)[:-1].decode('utf-8', 'replace'))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if req_camera_image in parents: return 0
        tmphash = (0xe4a54a9f4a8bee31) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if req_camera_image._packed_fingerprint is None:
            req_camera_image._packed_fingerprint = struct.pack(">Q", req_camera_image._get_hash_recursive([]))
        return req_camera_image._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", req_camera_image._get_packed_fingerprint())[0]

