"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class robot_feedback(object):

    __slots__ = ["sec", "nanosec", "utime", "seq", "numJoint", "qFb", "qdFb", "numGripper", "gripperPosFb", "eePosFb", "eeQuatFb", "odometry"]

    __typenames__ = ["int32_t", "int32_t", "int64_t", "int32_t", "int32_t", "float", "float", "int8_t", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, ["numJoint"], ["numJoint"], None, ["numGripper"], [3], [4], [3]]

    def __init__(self):
        self.sec = 0
        """ LCM Type: int32_t """
        self.nanosec = 0
        """
        Timestamp seconds
        LCM Type: int32_t
        """

        self.utime = 0
        """
        Timestamp nanoseconds
        LCM Type: int64_t
        """

        self.seq = 0
        """
        Microsecond timestamp
        LCM Type: int32_t
        """

        self.numJoint = 0
        """
        Sequence number
        LCM Type: int32_t
        """

        self.qFb = []
        """
        Number of joints
        LCM Type: float[numJoint]
        """

        self.qdFb = []
        """
        Joint position feedback
        LCM Type: float[numJoint]
        """

        self.numGripper = 0
        """
        Joint velocity feedback
        LCM Type: int8_t
        """

        self.gripperPosFb = []
        """
        Number of grippers
        LCM Type: float[numGripper]
        """

        self.eePosFb = [ 0.0 for dim0 in range(3) ]
        """
        Gripper position feedback
        LCM Type: float[3]
        """

        self.eeQuatFb = [ 0.0 for dim0 in range(4) ]
        """
        End-effector position feedback [x, y, z]
        LCM Type: float[4]
        """

        self.odometry = [ 0.0 for dim0 in range(3) ]
        """
        End-effector quaternion feedback [w, x, y, z]
        LCM Type: float[3]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(robot_feedback._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiqii", self.sec, self.nanosec, self.utime, self.seq, self.numJoint))
        buf.write(struct.pack('>%df' % self.numJoint, *self.qFb[:self.numJoint]))
        buf.write(struct.pack('>%df' % self.numJoint, *self.qdFb[:self.numJoint]))
        buf.write(struct.pack(">b", self.numGripper))
        buf.write(struct.pack('>%df' % self.numGripper, *self.gripperPosFb[:self.numGripper]))
        buf.write(struct.pack('>3f', *self.eePosFb[:3]))
        buf.write(struct.pack('>4f', *self.eeQuatFb[:4]))
        buf.write(struct.pack('>3f', *self.odometry[:3]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robot_feedback._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot_feedback._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = robot_feedback()
        self.sec, self.nanosec, self.utime, self.seq, self.numJoint = struct.unpack(">iiqii", buf.read(24))
        self.qFb = struct.unpack('>%df' % self.numJoint, buf.read(self.numJoint * 4))
        self.qdFb = struct.unpack('>%df' % self.numJoint, buf.read(self.numJoint * 4))
        self.numGripper = struct.unpack(">b", buf.read(1))[0]
        self.gripperPosFb = struct.unpack('>%df' % self.numGripper, buf.read(self.numGripper * 4))
        self.eePosFb = struct.unpack('>3f', buf.read(12))
        self.eeQuatFb = struct.unpack('>4f', buf.read(16))
        self.odometry = struct.unpack('>3f', buf.read(12))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if robot_feedback in parents: return 0
        tmphash = (0x207d6b9825023a2d) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if robot_feedback._packed_fingerprint is None:
            robot_feedback._packed_fingerprint = struct.pack(">Q", robot_feedback._get_hash_recursive([]))
        return robot_feedback._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", robot_feedback._get_packed_fingerprint())[0]

