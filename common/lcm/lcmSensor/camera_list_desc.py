"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import lcmSensor

class camera_list_desc(object):

    __slots__ = ["seq", "stamp", "n", "cameras"]

    __typenames__ = ["int32_t", "int64_t", "int32_t", "lcmSensor.camera_desc"]

    __dimensions__ = [None, None, None, ["n"]]

    def __init__(self):
        self.seq = 0
        """ LCM Type: int32_t """
        self.stamp = 0
        """
        Sequence number
        LCM Type: int64_t
        """

        self.n = 0
        """
        Timestamp in nanoseconds (ROS2 style)
        LCM Type: int32_t
        """

        self.cameras = []
        """ LCM Type: lcmSensor.camera_desc[n] """

    def encode(self):
        buf = BytesIO()
        buf.write(camera_list_desc._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iqi", self.seq, self.stamp, self.n))
        for i0 in range(self.n):
            assert self.cameras[i0]._get_packed_fingerprint() == lcmSensor.camera_desc._get_packed_fingerprint()
            self.cameras[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != camera_list_desc._get_packed_fingerprint():
            raise ValueError("Decode error")
        return camera_list_desc._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = camera_list_desc()
        self.seq, self.stamp, self.n = struct.unpack(">iqi", buf.read(16))
        self.cameras = []
        for i0 in range(self.n):
            self.cameras.append(lcmSensor.camera_desc._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if camera_list_desc in parents: return 0
        newparents = parents + [camera_list_desc]
        tmphash = (0x69905421e60f1022+ lcmSensor.camera_desc._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if camera_list_desc._packed_fingerprint is None:
            camera_list_desc._packed_fingerprint = struct.pack(">Q", camera_list_desc._get_hash_recursive([]))
        return camera_list_desc._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", camera_list_desc._get_packed_fingerprint())[0]

