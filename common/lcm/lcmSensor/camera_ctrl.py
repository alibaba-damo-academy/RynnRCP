"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class camera_ctrl(object):

    __slots__ = ["id", "fps", "width", "height", "format"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "int32_t", "string"]

    __dimensions__ = [None, None, None, None, None]

    def __init__(self):
        self.id = 0
        """ LCM Type: int32_t """
        self.fps = 0
        """ LCM Type: int32_t """
        self.width = 0
        """ LCM Type: int32_t """
        self.height = 0
        """ LCM Type: int32_t """
        self.format = ""
        """ LCM Type: string """

    def encode(self):
        buf = BytesIO()
        buf.write(camera_ctrl._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiii", self.id, self.fps, self.width, self.height))
        __format_encoded = self.format.encode('utf-8')
        buf.write(struct.pack('>I', len(__format_encoded)+1))
        buf.write(__format_encoded)
        buf.write(b"\0")

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != camera_ctrl._get_packed_fingerprint():
            raise ValueError("Decode error")
        return camera_ctrl._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = camera_ctrl()
        self.id, self.fps, self.width, self.height = struct.unpack(">iiii", buf.read(16))
        __format_len = struct.unpack('>I', buf.read(4))[0]
        self.format = buf.read(__format_len)[:-1].decode('utf-8', 'replace')
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if camera_ctrl in parents: return 0
        tmphash = (0x7038e55af7a27478) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if camera_ctrl._packed_fingerprint is None:
            camera_ctrl._packed_fingerprint = struct.pack(">Q", camera_ctrl._get_hash_recursive([]))
        return camera_ctrl._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", camera_ctrl._get_packed_fingerprint())[0]

