"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class req_camera_status(object):

    __slots__ = ["seq", "stamp", "id"]

    __typenames__ = ["int32_t", "int64_t", "int32_t"]

    __dimensions__ = [None, None, None]

    def __init__(self):
        self.seq = 0
        """ LCM Type: int32_t """
        self.stamp = 0
        """
        Sequence number
        LCM Type: int64_t
        """

        self.id = 0
        """
        Timestamp in nanoseconds (ROS2 style)
        LCM Type: int32_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(req_camera_status._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iqi", self.seq, self.stamp, self.id))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != req_camera_status._get_packed_fingerprint():
            raise ValueError("Decode error")
        return req_camera_status._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = req_camera_status()
        self.seq, self.stamp, self.id = struct.unpack(">iqi", buf.read(16))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if req_camera_status in parents: return 0
        tmphash = (0x28d24a0429e4084f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if req_camera_status._packed_fingerprint is None:
            req_camera_status._packed_fingerprint = struct.pack(">Q", req_camera_status._get_hash_recursive([]))
        return req_camera_status._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", req_camera_status._get_packed_fingerprint())[0]

